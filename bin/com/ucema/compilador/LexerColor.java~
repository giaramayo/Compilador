// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/com/ucema/compilador/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


@SuppressWarnings("fallthrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\6\1\12\1\13\2\14"+
    "\1\15\1\16\1\14\1\17\1\0\1\20\1\21\11\22"+
    "\1\1\1\14\1\6\1\23\1\24\2\0\1\25\1\26"+
    "\1\27\1\25\1\30\6\25\1\31\1\32\1\33\1\34"+
    "\1\35\12\25\1\14\1\36\1\14\1\0\1\25\1\0"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\2\25\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\3\25\1\63\1\14"+
    "\1\64\1\14\7\0\1\3\73\0\1\25\7\0\1\25"+
    "\3\0\1\25\3\0\1\25\1\0\1\25\6\0\1\25"+
    "\1\0\1\25\4\0\1\65\7\0\1\25\3\0\1\25"+
    "\3\0\1\25\1\0\1\25\6\0\1\25\1\0\1\25"+
    "\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\2\1\1\4\1\3\1\5"+
    "\2\2\1\1\2\6\20\1\1\4\3\0\2\2\1\0"+
    "\1\7\23\1\1\10\3\1\3\0\2\7\24\1\1\11"+
    "\2\1\2\0\1\7\22\1\1\10\1\1\1\0\2\1"+
    "\1\12\2\1\1\13\1\14\7\1\1\15\3\1\1\0"+
    "\7\1\1\16\3\1\1\17\1\11\6\1\1\20\3\1"+
    "\1\21\31\1\1\22\6\1\1\23\2\1\1\24\5\1"+
    "\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\66\0\66\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\330\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762"+
    "\0\u0252\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\66\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u02be\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u0c72\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
    "\0\u02be\0\u15f0\0\u1626\0\u165c\0\u1692\0\u02be\0\u16c8\0\u16fe"+
    "\0\u02be\0\u02be\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u02be\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u02be\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\66\0\u19f2\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u02be\0\u1dbe\0\u1df4"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u02be"+
    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u02be\0\u2448"+
    "\0\u247e\0\u02be\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u02be";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\5\1\14\1\15\1\16"+
    "\1\17\1\20\2\5\4\21\1\22\4\21\1\2\1\23"+
    "\1\21\1\24\1\25\1\26\1\27\2\21\1\30\1\31"+
    "\1\21\1\32\1\33\1\34\1\21\1\35\1\36\1\37"+
    "\1\21\1\40\1\21\1\41\1\21\70\0\1\3\106\0"+
    "\1\3\42\0\7\42\1\12\26\42\1\43\27\42\21\0"+
    "\2\44\2\0\11\44\1\0\25\44\1\0\1\44\25\0"+
    "\11\45\1\0\25\45\1\0\1\45\12\0\1\3\71\0"+
    "\1\3\4\0\1\3\61\0\1\46\3\0\1\3\57\0"+
    "\1\47\2\0\1\50\2\0\1\3\63\0\2\51\64\0"+
    "\2\20\64\0\2\21\2\0\11\21\1\0\25\21\1\0"+
    "\1\21\7\0\1\42\11\0\2\21\2\0\11\21\1\0"+
    "\25\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\3\21\1\52\15\21\1\53\3\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\1\54\13\21\1\55\10\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\4\21"+
    "\1\56\20\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\20\21\1\57\4\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\1\60\7\21\1\61\6\21\1\62"+
    "\5\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\12\21\1\63\1\64\10\21\1\65\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\1\66\24\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\14\21\1\67\5\21"+
    "\1\70\2\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\4\21\1\26\20\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\10\21\1\71\3\21\1\72\10\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\4\21"+
    "\1\73\20\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\10\21\1\74\11\21\1\75\2\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\14\21\1\76\10\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\4\21"+
    "\1\77\20\21\1\0\1\21\64\0\1\3\1\0\2\42"+
    "\4\0\60\42\21\0\2\100\2\0\11\100\1\0\25\100"+
    "\1\0\1\100\21\0\2\45\2\0\11\45\1\0\25\45"+
    "\1\0\1\45\24\0\1\13\41\0\15\101\1\102\50\101"+
    "\2\50\1\103\2\50\1\104\60\50\21\0\2\21\2\0"+
    "\11\21\1\0\4\21\1\105\20\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\17\21\1\106\5\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\3\21\1\107"+
    "\21\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\11\21\1\110\13\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\17\21\1\111\1\21\1\112\3\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\21\21\1\113"+
    "\3\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\11\21\1\114\13\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\13\21\1\115\11\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\4\21\1\116\20\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\15\21\1\117"+
    "\7\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\21\21\1\120\3\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\16\21\1\121\6\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\13\21\1\122\11\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\17\21\1\57"+
    "\5\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\12\21\1\123\12\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\13\21\1\124\11\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\13\21\1\125\11\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\15\21\1\126"+
    "\3\21\1\127\3\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\13\21\1\130\11\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\17\21\1\131\5\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\12\21\1\132"+
    "\12\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\17\21\1\133\5\21\1\0\1\21\21\0\2\134\2\0"+
    "\11\134\1\0\25\134\1\0\1\134\15\101\1\135\65\101"+
    "\1\135\2\101\1\136\45\101\2\0\1\103\104\0\2\21"+
    "\2\0\11\21\1\0\11\21\1\137\13\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\25\21\1\0\1\140"+
    "\21\0\2\21\2\0\11\21\1\0\4\21\1\141\20\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\14\21"+
    "\1\142\10\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\4\21\1\143\20\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\4\21\1\144\20\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\4\21\1\131\20\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\20\21"+
    "\1\145\4\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\1\146\24\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\13\21\1\147\11\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\17\21\1\150\5\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\4\21\1\151"+
    "\20\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\22\21\1\152\2\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\24\21\1\153\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\4\21\1\154\20\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\21\21\1\155\3\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\4\21"+
    "\1\156\20\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\4\21\1\157\20\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\14\21\1\160\10\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\14\21\1\161\10\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\1\156"+
    "\24\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\3\21\1\162\21\21\1\0\1\21\21\0\2\163\2\0"+
    "\11\163\1\0\25\163\1\0\1\163\15\101\1\135\2\101"+
    "\1\103\45\101\21\0\2\21\2\0\11\21\1\0\1\164"+
    "\24\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\20\21\1\131\4\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\13\21\1\165\11\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\17\21\1\166\5\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\2\21\1\167"+
    "\22\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\13\21\1\170\11\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\14\21\1\171\10\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\11\21\1\172\13\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\21\21\1\173"+
    "\3\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\10\21\1\174\14\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\17\21\1\175\5\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\10\21\1\176\14\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\1\177\24\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\17\21"+
    "\1\200\5\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\1\201\24\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\17\21\1\202\5\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\21\21\1\203\3\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\17\21\1\204"+
    "\5\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\1\205\24\21\1\0\1\21\21\0\2\206\2\0\11\206"+
    "\1\0\25\206\1\0\1\206\21\0\2\21\2\0\11\21"+
    "\1\0\13\21\1\57\11\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\1\166\24\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\7\21\1\207\15\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\4\21\1\210"+
    "\20\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\4\21\1\211\20\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\12\21\1\212\12\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\17\21\1\213\5\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\4\21\1\214"+
    "\20\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\17\21\1\215\5\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\14\21\1\166\10\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\17\21\1\216\5\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\10\21\1\217"+
    "\14\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\13\21\1\220\11\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\3\21\1\221\21\21\1\0\1\21\21\0"+
    "\2\222\2\0\11\222\1\0\25\222\1\0\1\222\21\0"+
    "\2\21\2\0\11\21\1\0\1\223\24\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\17\21\1\224\5\21"+
    "\1\0\1\21\21\0\2\21\2\0\3\21\1\225\5\21"+
    "\1\0\25\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\10\21\1\226\14\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\22\21\1\227\2\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\17\21\1\230\5\21"+
    "\1\0\1\21\21\0\2\21\2\0\5\21\1\231\3\21"+
    "\1\0\25\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\17\21\1\232\5\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\1\226\24\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\4\21\1\233\20\21\1\0"+
    "\1\21\21\0\2\21\2\0\10\21\1\234\1\0\25\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\20\21"+
    "\1\235\4\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\17\21\1\236\5\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\12\21\1\237\12\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\3\21\1\207\21\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\14\21"+
    "\1\240\10\21\1\0\1\21\21\0\2\21\2\0\5\21"+
    "\1\241\3\21\1\0\25\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\17\21\1\145\5\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\10\21\1\242\14\21"+
    "\1\0\1\21\21\0\2\21\2\0\1\21\1\243\1\244"+
    "\3\21\1\245\1\246\1\21\1\0\25\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\15\21\1\247\7\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\13\21"+
    "\1\250\11\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\10\21\1\251\14\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\13\21\1\252\11\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\1\253\10\21\1\254"+
    "\13\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\11\21\1\255\13\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\4\21\1\256\20\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\1\21\1\257\23\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\10\21\1\260"+
    "\14\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\4\21\1\261\20\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\4\21\1\262\20\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\21\21\1\263\3\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\11\21\1\264"+
    "\13\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\1\265\24\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\1\266\24\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\6\21\1\266\16\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\20\21\1\267\4\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\17\21\1\270"+
    "\5\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\3\21\1\271\21\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\13\21\1\272\11\21\1\0\1\21\21\0"+
    "\2\21\2\0\11\21\1\0\1\260\24\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\10\21\1\273\14\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\13\21"+
    "\1\274\11\21\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\17\21\1\275\5\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\21\21\1\276\3\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\1\277\24\21\1\0"+
    "\1\21\21\0\2\21\2\0\11\21\1\0\21\21\1\300"+
    "\3\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\24\21\1\301\1\0\1\21\21\0\2\21\2\0\11\21"+
    "\1\0\2\21\1\275\22\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\14\21\1\302\10\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\25\21\1\0\1\303"+
    "\21\0\2\21\2\0\11\21\1\0\17\21\1\304\5\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\1\302"+
    "\24\21\1\0\1\21\21\0\2\21\2\0\11\21\1\0"+
    "\2\21\1\305\22\21\1\0\1\21\21\0\2\21\2\0"+
    "\11\21\1\0\1\306\24\21\1\0\1\21\21\0\2\21"+
    "\2\0\11\21\1\0\22\21\1\307\2\21\1\0\1\21"+
    "\21\0\2\21\2\0\11\21\1\0\20\21\1\310\4\21"+
    "\1\0\1\21\21\0\2\21\2\0\11\21\1\0\11\21"+
    "\1\275\13\21\1\0\1\21";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9666];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\2\11\26\1\3\0\2\1\1\0"+
    "\30\1\3\0\1\11\30\1\2\0\25\1\1\0\22\1"+
    "\1\0\13\1\1\11\66\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
          // fall through
          case 21: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 22: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(0, 102, 255));
            }
          // fall through
          case 23: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(46, 125, 50));
            }
          // fall through
          case 24: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(169, 155, 179));
            }
          // fall through
          case 25: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(35, 120, 147));
            }
          // fall through
          case 26: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
          // fall through
          case 27: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(48, 63, 159));
            }
          // fall through
          case 28: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(17, 94, 153));
            }
          // fall through
          case 29: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(148, 58, 173));
            }
          // fall through
          case 30: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(0, 204, 102));
            }
          // fall through
          case 31: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(198, 40, 40));
            }
          // fall through
          case 32: break;
          case 13:
            { return textColor(yychar, yylength(), new Color(102, 41, 120));
            }
          // fall through
          case 33: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(212, 129, 6));
            }
          // fall through
          case 34: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(224, 195, 12));
            }
          // fall through
          case 35: break;
          case 16:
            { return textColor(yychar, yylength(), new Color(121, 107, 255));
            }
          // fall through
          case 36: break;
          case 17:
            { return textColor(yychar, yylength(), new Color(102, 102, 255));
            }
          // fall through
          case 37: break;
          case 18:
            { return textColor(yychar, yylength(), new Color(255, 64, 129));
            }
          // fall through
          case 38: break;
          case 19:
            { return textColor(yychar, yylength(), new Color(239, 108, 0));
            }
          // fall through
          case 39: break;
          case 20:
            { return textColor(yychar, yylength(), new Color(150, 0, 80));
            }
          // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
